{"version":3,"sources":["components/todo.js","components/todoform.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todo","ListGroup","Item","onClick","this","props","toggleComplete","style","textDecoration","complete","name","Component","TodoForm","state","handleSubmit","event","preventDefault","onSubmit","setState","handleChange","target","value","Form","Row","Col","type","onChange","Button","variant","TodoList","todoToShow","todolist","id","addTodo","todo","map","updateTodoToShow","status","todos","filter","list","key","JSON","stringify","length","App","Container","fluid","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92a212cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nclass Todo extends Component {\n\n    render() {\n        return (\n            <ListGroup.Item \n                onClick={this.props.toggleComplete}\n                style={\n                    {\n                        textDecoration: this.props.complete?\" line-through\":\"\"\n                    }\n                }>\n                {this.props.name}\n            </ListGroup.Item>\n        )\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport { Button, Form, Row, Col } from 'react-bootstrap';\n\nclass TodoForm extends Component {\n\n    state = {\n        name: \"\"\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.onSubmit({\n            name: this.state.name,\n            complete: false\n        })\n\n        this.setState({ name: \"\" })\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    render() {\n        return (\n\n            <Form onSubmit={this.handleSubmit}>\n                <Row>\n                    <Col>\n                        <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.name}></input>\n                    </Col>\n                    <Col>\n                        <Button variant=\"primary\" type=\"submit\">+</Button>\n                    </Col>\n                </Row>\n            </Form>\n\n        )\n    }\n\n}\nexport default TodoForm;","import React, { Component, Fragment } from 'react';\nimport Todo from \"./todo\";\nimport TodoForm from \"./todoform\";\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Button, Row, Col } from 'react-bootstrap';\n\nclass TodoList extends Component {\n\n    state = {\n        todoToShow: \"all\",\n        todolist: [\n            {\n                id: 53454,\n                name: \"uno\",\n                complete: true,\n            },\n            {\n                id: 32222,\n                name: \"dos\",\n                complete: false,\n            },\n        ]\n    }\n\n    addTodo = todo => {\n        this.setState({\n            todolist: [todo, ...this.state.todolist]\n        })\n    }\n\n    toggleComplete = (id) => {\n\n        this.setState({\n            todolist: this.state.todolist.map(todo => {\n                if (todo.id === id) {\n\n                    return {\n                        ...todo,\n                        complete: !todo.complete\n                    }\n                } else {\n\n                    return todo;\n                }\n            })\n        })\n    }\n\n    updateTodoToShow = (status) => {\n        this.setState({\n            todoToShow: status\n        })\n    }\n\n    render() {\n\n        let todos = [];\n\n        if (this.state.todoToShow === \"all\") {\n            todos = this.state.todolist;\n        } else if (this.state.todoToShow === \"complete\") {\n            todos = this.state.todolist.filter(todo => todo.complete)\n        } else if (this.state.todoToShow === \"active\") {\n            todos = this.state.todolist.filter(todo => !todo.complete)\n        }\n\n        const list = todos.map((todo) =>\n            <Todo\n                key={todo.id}\n                toggleComplete={() => this.toggleComplete(todo.id)}\n                name={todo.name}\n                complete={todo.complete}>\n\n            </Todo>)\n\n        return (\n            <div>\n                {\n                    JSON.stringify(todos)\n                }\n                <Row>\n\n                    <Col>\n                        {\n                            list.length > 0 ?\n                                <ListGroup variant=\"flush\" >{list}</ListGroup>\n                                : <div>No tasks to show</div>\n                        }\n                    </Col>\n                    <Col>\n                        <TodoForm onSubmit={this.addTodo}></TodoForm>\n                    </Col>\n                </Row>\n                <br /><br />\n                <Row>\n                    <Col>Todos left: {this.state.todolist.filter(todo => !todo.complete).length}</Col>\n                </Row>\n                <br /><br />\n                <Row>\n                    <Col>\n                        <Row>\n                            <Col>\n                                <Button variant=\"link\" onClick={() => this.updateTodoToShow(\"all\")}>All</Button>\n                            </Col>\n                            <Col>\n                                <Button variant=\"link\" onClick={() => this.updateTodoToShow(\"complete\")}>Complete</Button>\n                            </Col>\n                            <Col>\n                                <Button variant=\"link\" onClick={() => this.updateTodoToShow(\"active\")}>Active</Button>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './components/todolist'\nimport './App.css';\nimport Container from 'react-bootstrap/Container'\n\n\nfunction App() {\n  return (\n    <Container fluid>\n      <header className=\"App-header\">\n        <h1>TODO list</h1>\n      </header>\n      <TodoList />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}